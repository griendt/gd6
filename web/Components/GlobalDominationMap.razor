@using System.Text
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JsInterop


<div class="container">
    <h3>Map</h3>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 @_width @_height"
        opacity="@_opacity"
        style="border: @_borderThickness solid var(--md-footer-bg-color)"
        @onmouseleave="UnSticky">
        <rect x="0" y="0" width="@_width" height="@_height" fill="@_backgroundColor"/>

        @foreach (var territory in _territories.Where(territory => territory != _activeTerritory)) {
            var centroid = Centroid(territory);

            <path
                id="@GetElementId(territory)"
                d="@GetSvgPathForTerritory(territory)"
                @onclick="() => SetActive(territory,true)"
                @onmouseenter="() => SetActive(territory, false)"
                stroke-width="@StrokeWidth(territory)"
                stroke="@TerritoryStrokeColour(territory)"
                fill="#f80"/>
            
            <text>
                <text
                    x="@centroid.X"
                    y="@centroid.Y"
                    text-anchor="middle"
                    font-family="Noticia Text"
                    font-size="32"
                    dominant-baseline="central"
                >
                    @territory.Identifier
                </text>
            </text>
        }

        @* Put the active territory in the back, to make it stand out on top of the rest *@
        @if (_activeTerritory != null) {
            var centroid = Centroid(_activeTerritory);
            
            <path
                id="@GetElementId(_activeTerritory)"
                d="@GetSvgPathForTerritory(_activeTerritory)"
                @onclick="() => SetActive(_activeTerritory,true)"
                @onmouseenter="() => SetActive(_activeTerritory, false)"
                stroke-width="@StrokeWidth(_activeTerritory)"
                stroke="@TerritoryStrokeColour(_activeTerritory)"
                fill="#f80"/>
            <text>
                <text
                    x="@centroid.X"
                    y="@centroid.Y"
                    text-anchor="middle"
                    font-family="Noticia Text"
                    font-size="32"
                    dominant-baseline="central"
                    >
                    @_activeTerritory.Identifier
                </text>
            </text>
        }
    </svg>

    @if (_activeTerritory != null) {
        <span>The currently selected territory ID is @_activeTerritory.Id</span>
        <span>My stickiness is currently @_isActiveTerritorySticky</span>
        <span>The area is @SignedArea(_activeTerritory)</span>
        <span>The centroid is @Centroid(_activeTerritory)</span>
    }
</div>

@code {

    #region styling

    private int _width = 1920;
    private int _height = 1080;
    private double _opacity = 0.9;
    private string _borderThickness = "30px";

    private string _backgroundColor = "#3a785e";
    private int _territoryStrokeWidth = 2;
    private int _territoryStrokeWidthActive = 8;
    private string _territoryStrokeColour = "#200";
    private string _territoryStrokeColourActive = "#dff";

    private int StrokeWidth(Territory territory) => territory == _activeTerritory ? _territoryStrokeWidthActive : _territoryStrokeWidth;
    private string TerritoryStrokeColour(Territory territory) => territory == _activeTerritory ? _territoryStrokeColourActive : _territoryStrokeColour;

    #endregion

    private List<Territory> _territories = [];

    private bool _isActiveTerritorySticky = false;
    private Territory? _activeTerritory = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        await LoadTerritories();
    }

    private async Task LoadTerritories() => _territories = await new Gd6DbContext().Territories.ToListAsync();

    private string GetSvgPathForTerritory(Territory territory)
    {
        var marker = 'M';
        var path = new StringBuilder();

        foreach (var xy in territory.Coordinates) {
            path.Append($"{marker}{xy.X},{xy.Y}");
            marker = 'L';
        }

        path.Append(" Z");

        return path.ToString();
    }

    private void SetActive(Territory territory, bool sticky)
    {
        if (sticky || !_isActiveTerritorySticky) {
            _activeTerritory = territory;
        }

        _isActiveTerritorySticky |= sticky;
    }

    private string GetElementId(Territory territory) => $"map-territory-{territory.Id}";

    private void UnSticky() => _isActiveTerritorySticky = false;

    private (int X, int Y) Centroid(Territory territory)
    {
        var centroidX = Enumerable
            .Range(0, territory.Coordinates.Count - 1)
            .Select(i => 
                (territory.Coordinates[i].X + territory.Coordinates[i + 1].X) * 
                (territory.Coordinates[i].X * territory.Coordinates[i + 1].Y - territory.Coordinates[i + 1].X * territory.Coordinates[i].Y))
            .Sum() / (6 * SignedArea(territory));
        
        var centroidY = Enumerable
            .Range(0, territory.Coordinates.Count - 1)
            .Select(i => 
                (territory.Coordinates[i].Y + territory.Coordinates[i + 1].Y) * 
                (territory.Coordinates[i].X * territory.Coordinates[i + 1].Y - territory.Coordinates[i + 1].X * territory.Coordinates[i].Y))
            .Sum() / (6 * SignedArea(territory));

        return (centroidX, centroidY);
    }
    
    private int SignedArea(Territory territory) => Enumerable
        .Range(0, territory.Coordinates.Count - 1)
        .Select(i => territory.Coordinates[i].X * territory.Coordinates[i + 1].Y - territory.Coordinates[i + 1].X * territory.Coordinates[i].Y)
        .Sum() / 2;
}