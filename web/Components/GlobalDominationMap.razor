@using Microsoft.EntityFrameworkCore
@using web.Models
@inject IJSRuntime JsInterop


<div class="container">
    <h3>Map</h3>
    <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 @_width @_height"
        opacity="@_opacity"
        style="border: @_borderThickness solid var(--md-footer-bg-color)"
        @onmouseleave="UnSticky">

        <rect x="0" y="0" width="@_width" height="@_height" fill="@_backgroundColor"/>
        @foreach (var territory in TerritoriesSorted) {
            <TerritorySvg
                Territory="territory"
                OnClick="() => SetActive(territory, true)"
                OnMouseEnter="() => SetActive(territory, false)"
                StrokeWidth="@StrokeWidth(territory)"
                StrokeColour="@TerritoryStrokeColour(territory)"
                FillColour="@TerritoryFillColour(territory)"
                />
        }
    </svg>
</div>

@code {
    #region styling

    private int _width = 1920;
    private int _height = 1080;
    private double _opacity = 0.9;
    private string _borderThickness = "30px";

    private string _backgroundColor = "#3a785e";
    private int _territoryStrokeWidth = 2;
    private int _territoryStrokeWidthActive = 8;
    private string _territoryStrokeColour = "#200";
    private string _territoryStrokeColourActive = "#dff";

    private int StrokeWidth(Territory territory) => territory == _activeTerritory ? _territoryStrokeWidthActive : _territoryStrokeWidth;
    private string TerritoryStrokeColour(Territory territory) => territory == _activeTerritory ? _territoryStrokeColourActive : _territoryStrokeColour;
    private string TerritoryFillColour(Territory territory) => territory.CurrentOwner()?.Colour ?? "#fdd";
    
    #endregion

    private List<Territory> _territories = [];

    private bool _isActiveTerritorySticky = false;
    private Territory? _activeTerritory = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
        await LoadTerritories();
    }

    private async Task LoadTerritories() => _territories = await new Gd6DbContext().Territories.ToListAsync();

    @* Put the active territory in the back, to make it stand out on top of the rest *@
    private List<Territory> TerritoriesSorted => _territories
        .Where(t => t != _activeTerritory)
        .Concat(_activeTerritory == null ? [] : [_activeTerritory])
        .ToList(); 

    private void SetActive(Territory territory, bool sticky)
    {
        if (sticky || !_isActiveTerritorySticky) {
            _activeTerritory = territory;
        }

        _isActiveTerritorySticky |= sticky;
        
        StateHasChanged();
    }

    private void UnSticky() => _isActiveTerritorySticky = false;
}